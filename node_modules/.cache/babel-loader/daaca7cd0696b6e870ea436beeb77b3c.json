{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Labs Dev Multi\\\\Nouveau dossier\\\\react-movie-app\\\\src\\\\components\\\\MovieList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nconst MovieList = props => {\n  _s();\n\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [userCountry, setUserCountry] = useState(null);\n  const [errorMsg, setErrorMsg] = useState(null);\n\n  const handleClick = async movie => {\n    try {\n      const detailsResponse = await fetchMovieDetails(movie.Title);\n      const trailerId = await fetchMovieTrailer(movie.Title);\n      setSelectedMovie({ ...movie,\n        description: detailsResponse.Plot,\n        trailer: trailerId\n      });\n    } catch (error) {\n      console.error('Error fetching movie details and trailer:', error);\n    }\n  };\n\n  const fetchMovieDetails = async movieTitle => {\n    try {\n      const response = await axios.get(`http://www.omdbapi.com/?t=${movieTitle}&apikey=70c47435`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching movie details:', error);\n      return null;\n    }\n  };\n\n  const fetchMovieTrailer = async movieTitle => {\n    try {\n      const response = await axios.get('https://www.googleapis.com/youtube/v3/search', {\n        params: {\n          q: `${movieTitle} trailer`,\n          part: 'snippet',\n          maxResults: 1,\n          type: 'video',\n          key: 'AIzaSyB0JWfa-UI4fXgayxvo4KFgDj6BU7WUlbw'\n        }\n      });\n      return response.data.items[0].id.videoId;\n    } catch (error) {\n      console.error('Error fetching movie trailer:', error);\n      return null;\n    }\n  };\n\n  const addToFavorites = movie => {\n    const isAlreadyAdded = props.movies.some(fav => fav.imdbID === movie.imdbID);\n\n    if (!isAlreadyAdded) {\n      props.AddFavourites(movie);\n    }\n  };\n\n  const getUserCountry = async () => {\n    try {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          const country = await getCountryFromLocation(latitude, longitude);\n          setUserCountry(country);\n        });\n      } else {\n        setErrorMsg('Geolocation is not supported by this browser.');\n      }\n    } catch (error) {\n      setErrorMsg('Error getting user country: ' + error.message);\n    }\n  };\n\n  const getCountryFromLocation = async (latitude, longitude) => {\n    try {\n      const response = await axios.get(`https://api.opencagedata.com/geocode/v1/json?q=${latitude},${longitude}&key=2de1c3f556354322b312077954676795`);\n      return response.data.results[0].components.country;\n    } catch (error) {\n      throw new Error('Error getting country from location: ' + error.message);\n    }\n  };\n\n  const filterMoviesByCountry = (movies, country) => {\n    return movies.filter(movie => movie.Country === country);\n  };\n\n  const FavouriteComponent = props.favouriteComponent;\n  const filteredMovies = userCountry ? filterMoviesByCountry(props.movies, userCountry) : props.movies;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getUserCountry,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        class: \"bi bi-film\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 40\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), errorMsg && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 20\n    }, this), props.movies.map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container d-flex justify-content-start m-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: movie.Poster,\n        alt: \"movie\",\n        onClick: () => handleClick(movie)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => props.handleFavouritesClick(movie),\n        className: \"overlay d-flex align-items-center justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(FavouriteComponent, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)), selectedMovie && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container d-flex justify-content-start m-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-movie-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedMovie.Poster,\n            alt: \"selected movie poster\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: selectedMovie.Title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: selectedMovie.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"trailer-container\",\n          children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n            width: \"560\",\n            height: \"315\",\n            src: `https://www.youtube.com/embed/${selectedMovie.trailer}`,\n            title: \"YouTube video player\",\n            frameBorder: \"0\",\n            allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n            allowFullScreen: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MovieList, \"sXTSacTQz6boo1iMMapfa6TNEbc=\");\n\n_c = MovieList;\nexport default MovieList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"sources":["C:/Users/hp/Desktop/Labs Dev Multi/Nouveau dossier/react-movie-app/src/components/MovieList.js"],"names":["React","useState","axios","MovieList","props","selectedMovie","setSelectedMovie","userCountry","setUserCountry","errorMsg","setErrorMsg","handleClick","movie","detailsResponse","fetchMovieDetails","Title","trailerId","fetchMovieTrailer","description","Plot","trailer","error","console","movieTitle","response","get","data","params","q","part","maxResults","type","key","items","id","videoId","addToFavorites","isAlreadyAdded","movies","some","fav","imdbID","AddFavourites","getUserCountry","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","country","getCountryFromLocation","message","results","components","Error","filterMoviesByCountry","filter","Country","FavouriteComponent","favouriteComponent","filteredMovies","map","index","Poster","handleFavouritesClick"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,IAAD,CAAxC;;AAEA,QAAMU,WAAW,GAAG,MAAOC,KAAP,IAAiB;AACnC,QAAI;AACF,YAAMC,eAAe,GAAG,MAAMC,iBAAiB,CAACF,KAAK,CAACG,KAAP,CAA/C;AACA,YAAMC,SAAS,GAAG,MAAMC,iBAAiB,CAACL,KAAK,CAACG,KAAP,CAAzC;AACAT,MAAAA,gBAAgB,CAAC,EAAE,GAAGM,KAAL;AAAYM,QAAAA,WAAW,EAAEL,eAAe,CAACM,IAAzC;AAA+CC,QAAAA,OAAO,EAAEJ;AAAxD,OAAD,CAAhB;AACD,KAJD,CAIE,OAAOK,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,2CAAd,EAA2DA,KAA3D;AACD;AACF,GARD;;AAUA,QAAMP,iBAAiB,GAAG,MAAOS,UAAP,IAAsB;AAC9C,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CAAW,6BAA4BF,UAAW,kBAAlD,CAAvB;AACA,aAAOC,QAAQ,CAACE,IAAhB;AACD,KAHD,CAGE,OAAOL,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,+BAAd,EAA+CA,KAA/C;AACA,aAAO,IAAP;AACD;AACF,GARD;;AAUA,QAAMJ,iBAAiB,GAAG,MAAOM,UAAP,IAAsB;AAC9C,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CAAU,8CAAV,EAA0D;AAC/EE,QAAAA,MAAM,EAAE;AACNC,UAAAA,CAAC,EAAG,GAAEL,UAAW,UADX;AAENM,UAAAA,IAAI,EAAE,SAFA;AAGNC,UAAAA,UAAU,EAAE,CAHN;AAINC,UAAAA,IAAI,EAAE,OAJA;AAKNC,UAAAA,GAAG,EAAE;AALC;AADuE,OAA1D,CAAvB;AASA,aAAOR,QAAQ,CAACE,IAAT,CAAcO,KAAd,CAAoB,CAApB,EAAuBC,EAAvB,CAA0BC,OAAjC;AACD,KAXD,CAWE,OAAOd,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,+BAAd,EAA+CA,KAA/C;AACA,aAAO,IAAP;AACD;AACF,GAhBD;;AAkBA,QAAMe,cAAc,GAAIxB,KAAD,IAAW;AAChC,UAAMyB,cAAc,GAAGjC,KAAK,CAACkC,MAAN,CAAaC,IAAb,CAAmBC,GAAD,IAASA,GAAG,CAACC,MAAJ,KAAe7B,KAAK,CAAC6B,MAAhD,CAAvB;;AAEA,QAAI,CAACJ,cAAL,EAAqB;AACnBjC,MAAAA,KAAK,CAACsC,aAAN,CAAoB9B,KAApB;AACD;AACF,GAND;;AAQA,QAAM+B,cAAc,GAAG,YAAY;AACjC,QAAI;AACF,UAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBD,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,MAAOC,QAAP,IAAoB;AAC3D,gBAAM;AAAEC,YAAAA,QAAF;AAAYC,YAAAA;AAAZ,cAA0BF,QAAQ,CAACG,MAAzC;AACA,gBAAMC,OAAO,GAAG,MAAMC,sBAAsB,CAACJ,QAAD,EAAWC,SAAX,CAA5C;AACAzC,UAAAA,cAAc,CAAC2C,OAAD,CAAd;AACD,SAJD;AAKD,OAND,MAMO;AACLzC,QAAAA,WAAW,CAAC,+CAAD,CAAX;AACD;AACF,KAVD,CAUE,OAAOW,KAAP,EAAc;AACdX,MAAAA,WAAW,CAAC,iCAAiCW,KAAK,CAACgC,OAAxC,CAAX;AACD;AACF,GAdD;;AAgBA,QAAMD,sBAAsB,GAAG,OAAOJ,QAAP,EAAiBC,SAAjB,KAA+B;AAC5D,QAAI;AACF,YAAMzB,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CAAW,kDAAiDuB,QAAS,IAAGC,SAAU,uCAAlF,CAAvB;AACA,aAAOzB,QAAQ,CAACE,IAAT,CAAc4B,OAAd,CAAsB,CAAtB,EAAyBC,UAAzB,CAAoCJ,OAA3C;AACD,KAHD,CAGE,OAAO9B,KAAP,EAAc;AACd,YAAM,IAAImC,KAAJ,CAAU,0CAA0CnC,KAAK,CAACgC,OAA1D,CAAN;AACD;AACF,GAPD;;AASA,QAAMI,qBAAqB,GAAG,CAACnB,MAAD,EAASa,OAAT,KAAqB;AACjD,WAAOb,MAAM,CAACoB,MAAP,CAAe9C,KAAD,IAAWA,KAAK,CAAC+C,OAAN,KAAkBR,OAA3C,CAAP;AACD,GAFD;;AAIA,QAAMS,kBAAkB,GAAGxD,KAAK,CAACyD,kBAAjC;AACF,QAAMC,cAAc,GAAGvD,WAAW,GAAGkD,qBAAqB,CAACrD,KAAK,CAACkC,MAAP,EAAe/B,WAAf,CAAxB,GAAsDH,KAAK,CAACkC,MAA9F;AAEE,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEK,cAAjB;AAAA,6BAAiC;AAAG,QAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA;AAAjC;AAAA;AAAA;AAAA;AAAA,YADF,EAEGlC,QAAQ,iBAAI;AAAA,gBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFf,EAGGL,KAAK,CAACkC,MAAN,CAAayB,GAAb,CAAiB,CAACnD,KAAD,EAAQoD,KAAR,kBAChB;AAAK,MAAA,SAAS,EAAC,kDAAf;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEpD,KAAK,CAACqD,MAAhB;AAAwB,QAAA,GAAG,EAAC,OAA5B;AAAoC,QAAA,OAAO,EAAE,MAAMtD,WAAW,CAACC,KAAD;AAA9D;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,OAAO,EAAE,MAAMR,KAAK,CAAC8D,qBAAN,CAA4BtD,KAA5B,CAApB;AAAwD,QAAA,SAAS,EAAC,0DAAlE;AAAA,+BACE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAuEoD,KAAvE;AAAA;AAAA;AAAA;AAAA,YADD,CAHH,EAWG3D,aAAa,iBACZ;AAAK,MAAA,SAAS,EAAC,kDAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,kCACE;AAAK,YAAA,GAAG,EAAEA,aAAa,CAAC4D,MAAxB;AAAgC,YAAA,GAAG,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,oCACE;AAAA,wBAAK5D,aAAa,CAACU;AAAnB;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,wBAAIV,aAAa,CAACa;AAAlB;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAK,UAAA,SAAS,EAAC,mBAAf;AAAA,iCACE;AACE,YAAA,KAAK,EAAC,KADR;AAEE,YAAA,MAAM,EAAC,KAFT;AAGE,YAAA,GAAG,EAAG,iCAAgCb,aAAa,CAACe,OAAQ,EAH9D;AAIE,YAAA,KAAK,EAAC,sBAJR;AAKE,YAAA,WAAW,EAAC,GALd;AAME,YAAA,KAAK,EAAC,0FANR;AAOE,YAAA,eAAe;AAPjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA,kBADF;AAsCD,CAzHD;;GAAMjB,S;;KAAAA,S;AA2HN,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst MovieList = (props) => {\r\n  const [selectedMovie, setSelectedMovie] = useState(null);\r\n  const [userCountry, setUserCountry] = useState(null);\r\n  const [errorMsg, setErrorMsg] = useState(null);\r\n\r\n  const handleClick = async (movie) => {\r\n    try {\r\n      const detailsResponse = await fetchMovieDetails(movie.Title);\r\n      const trailerId = await fetchMovieTrailer(movie.Title);\r\n      setSelectedMovie({ ...movie, description: detailsResponse.Plot, trailer: trailerId });\r\n    } catch (error) {\r\n      console.error('Error fetching movie details and trailer:', error);\r\n    }\r\n  };\r\n\r\n  const fetchMovieDetails = async (movieTitle) => {\r\n    try {\r\n      const response = await axios.get(`http://www.omdbapi.com/?t=${movieTitle}&apikey=70c47435`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching movie details:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const fetchMovieTrailer = async (movieTitle) => {\r\n    try {\r\n      const response = await axios.get('https://www.googleapis.com/youtube/v3/search', {\r\n        params: {\r\n          q: `${movieTitle} trailer`,\r\n          part: 'snippet',\r\n          maxResults: 1,\r\n          type: 'video',\r\n          key: 'AIzaSyB0JWfa-UI4fXgayxvo4KFgDj6BU7WUlbw'\r\n        }\r\n      });\r\n      return response.data.items[0].id.videoId;\r\n    } catch (error) {\r\n      console.error('Error fetching movie trailer:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const addToFavorites = (movie) => {\r\n    const isAlreadyAdded = props.movies.some((fav) => fav.imdbID === movie.imdbID);\r\n\r\n    if (!isAlreadyAdded) {\r\n      props.AddFavourites(movie);\r\n    }\r\n  };\r\n\r\n  const getUserCountry = async () => {\r\n    try {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(async (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          const country = await getCountryFromLocation(latitude, longitude);\r\n          setUserCountry(country);\r\n        });\r\n      } else {\r\n        setErrorMsg('Geolocation is not supported by this browser.');\r\n      }\r\n    } catch (error) {\r\n      setErrorMsg('Error getting user country: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const getCountryFromLocation = async (latitude, longitude) => {\r\n    try {\r\n      const response = await axios.get(`https://api.opencagedata.com/geocode/v1/json?q=${latitude},${longitude}&key=2de1c3f556354322b312077954676795`);\r\n      return response.data.results[0].components.country;\r\n    } catch (error) {\r\n      throw new Error('Error getting country from location: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const filterMoviesByCountry = (movies, country) => {\r\n    return movies.filter((movie) => movie.Country === country);\r\n  };\r\n\r\n  const FavouriteComponent = props.favouriteComponent;\r\nconst filteredMovies = userCountry ? filterMoviesByCountry(props.movies, userCountry) : props.movies;\r\n\r\n  return (\r\n    <>\r\n      <button onClick={getUserCountry}><i class=\"bi bi-film\"></i></button>\r\n      {errorMsg && <p>{errorMsg}</p>}\r\n      {props.movies.map((movie, index) => (\r\n        <div className='image-container d-flex justify-content-start m-3' key={index}>\r\n          <img src={movie.Poster} alt='movie' onClick={() => handleClick(movie)} />\r\n          <div onClick={() => props.handleFavouritesClick(movie)} className='overlay d-flex align-items-center justify-content-center'>\r\n            <FavouriteComponent />\r\n          </div>\r\n        </div>\r\n      ))}\r\n      {selectedMovie && (\r\n        <div className='image-container d-flex justify-content-start m-3'>\r\n          <div className='selected-movie-details'>\r\n            <div className='movie-info'>\r\n              <img src={selectedMovie.Poster} alt='selected movie poster' />\r\n              <div>\r\n                <h2>{selectedMovie.Title}</h2>\r\n                <p>{selectedMovie.description}</p>\r\n              </div>\r\n            </div>\r\n            <div className='trailer-container'>\r\n              <iframe\r\n                width='560'\r\n                height='315'\r\n                src={`https://www.youtube.com/embed/${selectedMovie.trailer}`}\r\n                title='YouTube video player'\r\n                frameBorder='0'\r\n                allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture'\r\n                allowFullScreen\r\n              ></iframe>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieList;\r\n"]},"metadata":{},"sourceType":"module"}